{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3170e6f0",
   "metadata": {},
   "source": [
    "## Assignment 4 of Cognitive computing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d89c082",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n",
      "[3 4 5 6 7]\n",
      "[ 3  6  9 12 15]\n",
      "[0.5 1.  1.5 2.  2.5]\n"
     ]
    }
   ],
   "source": [
    "#Question 1 creating numpy and operations\n",
    "import numpy as np\n",
    "array=np.array([1,2,3,4,5])\n",
    "addition=array+2\n",
    "multiplication=array*3\n",
    "division=array/2\n",
    "\n",
    "print(array)\n",
    "print(addition)\n",
    "print(multiplication)\n",
    "print(division)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "639b931a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5 4 6 3 2 1]\n",
      "1 [0 5 7 8 9]\n",
      "1 [0 1 2]\n"
     ]
    }
   ],
   "source": [
    "#Question 2 \n",
    "import numpy as np\n",
    "# A Reversing the array\n",
    "arr = np.array([1, 2, 3, 6, 4, 5])\n",
    "reversed_arr = arr[::-1]\n",
    "\n",
    "# B finding the most frequent\n",
    "def most_frequent_indices(array):\n",
    "    unique, counts = np.unique(array, return_counts=True)\n",
    "    most_frequent = unique[np.argmax(counts)]\n",
    "    indices = np.where(array == most_frequent)[0]\n",
    "    return most_frequent, indices\n",
    "\n",
    "x = np.array([1, 2, 3, 4, 5, 1, 2, 1, 1, 1])\n",
    "y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3])\n",
    "\n",
    "most_frequent_x, indices_x = most_frequent_indices(x)\n",
    "most_frequent_y, indices_y = most_frequent_indices(y)\n",
    "\n",
    "print(reversed_arr)\n",
    "print(most_frequent_x, indices_x)\n",
    "print(most_frequent_y, indices_y)\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "50533c05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "70\n"
     ]
    }
   ],
   "source": [
    "#Question 3\n",
    "grid = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\n",
    "\n",
    "first_pick = grid[0, 1]\n",
    "second_pick = grid[2, 0]\n",
    "\n",
    "print(first_pick)\n",
    "print(second_pick)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d407ec79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "(25,)\n",
      "25\n",
      "float64\n",
      "200\n",
      "[[ 10.  ]\n",
      " [ 13.75]\n",
      " [ 17.5 ]\n",
      " [ 21.25]\n",
      " [ 25.  ]\n",
      " [ 28.75]\n",
      " [ 32.5 ]\n",
      " [ 36.25]\n",
      " [ 40.  ]\n",
      " [ 43.75]\n",
      " [ 47.5 ]\n",
      " [ 51.25]\n",
      " [ 55.  ]\n",
      " [ 58.75]\n",
      " [ 62.5 ]\n",
      " [ 66.25]\n",
      " [ 70.  ]\n",
      " [ 73.75]\n",
      " [ 77.5 ]\n",
      " [ 81.25]\n",
      " [ 85.  ]\n",
      " [ 88.75]\n",
      " [ 92.5 ]\n",
      " [ 96.25]\n",
      " [100.  ]]\n"
     ]
    }
   ],
   "source": [
    "#Question 4\n",
    "Dhairya_dnp = np.linspace(10, 100, 25)\n",
    "\n",
    "print(Dhairya_dnp.ndim)\n",
    "print(Dhairya_dnp.shape)\n",
    "print(Dhairya_dnp.size)\n",
    "print(Dhairya_dnp.dtype)\n",
    "print(Dhairya_dnp.nbytes)\n",
    "\n",
    "transposed_dnp = Dhairya_dnp.reshape(25, 1)\n",
    "print(transposed_dnp)\n",
    "\n",
    "# No, T attribute doesn't work on 1-D arrays since they remain unchanged.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c0aa96da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43.333333333333336\n",
      "37.5\n",
      "90\n",
      "10\n",
      "[10 15 20 30 35 40 50 60 70 80 90]\n",
      "[[10 20 30]\n",
      " [40 50 60]\n",
      " [70 80 90]\n",
      " [15 20 35]]\n",
      "[[10 20 30]\n",
      " [40 50 60]]\n"
     ]
    }
   ],
   "source": [
    "#Question 5\n",
    "ucs420_Dhairya_dnp = np.array([[10, 20, 30, 40], [50, 60, 70, 80], [90, 15, 20, 35]])\n",
    "\n",
    "print(np.mean(ucs420_Dhairya_dnp))\n",
    "print(np.median(ucs420_Dhairya_dnp))\n",
    "print(np.max(ucs420_Dhairya_dnp))\n",
    "print(np.min(ucs420_Dhairya_dnp))\n",
    "print(np.unique(ucs420_Dhairya_dnp))\n",
    "\n",
    "reshaped_ucs420_Dhairya_dnp = ucs420_Dhairya_dnp.reshape(4, 3)\n",
    "resized_ucs420_Dhairya_dnp = np.resize(ucs420_Dhairya_dnp, (2, 3))\n",
    "\n",
    "print(reshaped_ucs420_Dhairya_dnp)\n",
    "print(resized_ucs420_Dhairya_dnp)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
