{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c19e8304",
   "metadata": {},
   "source": [
    "##This is the Assignment submission of Assignment 5 by dhairya Parikh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "258663c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1 Copied Question\n",
    "gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')\n",
    "#atleast example to geeks for geeks ka change karlete\n",
    "\n",
    "print(np.sum(gfg))\n",
    "print(np.sum(gfg, axis=1))\n",
    "print(np.sum(gfg, axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bec0160c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 2\n",
    "# Part (a)\n",
    "array_a = np.array([10, 52, 62, 16, 16, 54, 453])\n",
    "\n",
    "sorted_array = np.sort(array_a)\n",
    "sorted_indices = np.argsort(array_a)\n",
    "smallest_4 = np.sort(array_a)[:4]\n",
    "largest_5 = np.sort(array_a)[-5:]\n",
    "\n",
    "print(sorted_array)\n",
    "print(sorted_indices)\n",
    "print(smallest_4)\n",
    "print(largest_5)\n",
    "\n",
    "# Part (b)\n",
    "array_b = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])\n",
    "\n",
    "integer_elements = array_b[array_b == array_b.astype(int)]\n",
    "float_elements = array_b[array_b != array_b.astype(int)]\n",
    "\n",
    "print(integer_elements)\n",
    "print(float_elements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84f23a61",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 3\n",
    "#Wolf of wall street thapar edition\n",
    "\n",
    "# Part (a)\n",
    "X = ord('D') + ord('d')  # ASCII sum of initials 'D' and 'd'\n",
    "sales = np.array([X, X+50, X+100, X+150, X+200])\n",
    "\n",
    "# Part (b)\n",
    "tax_rate = ((X % 5) + 5) / 100 #Jai Nirmala Sitharaman\n",
    "sales_after_tax = sales * (1 - tax_rate)\n",
    "\n",
    "# Part (c)\n",
    "discounted_sales = np.where(sales < X+100, sales * 0.95, sales * 0.90)\n",
    "\n",
    "# Part (d)\n",
    "weekly_sales = np.tile(sales, (3, 1))\n",
    "weekly_growth = np.array([1.00, 1.02, 1.04]).reshape(3, 1)\n",
    "adjusted_weekly_sales = weekly_sales * weekly_growth\n",
    "\n",
    "print(sales_after_tax)\n",
    "print(discounted_sales)\n",
    "print(adjusted_weekly_sales)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f370b52e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x = np.linspace(-10, 10, 100)\n",
    "\n",
    "y1 = x**2\n",
    "y2 = np.sin(x)\n",
    "y3 = np.exp(x)\n",
    "y4 = np.log(np.abs(x) + 1)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "plt.plot(x, y1, label=\"y = x^2\")\n",
    "plt.plot(x, y2, label=\"y = sin(x)\")\n",
    "plt.plot(x, y3, label=\"y = e^x\")\n",
    "plt.plot(x, y4, label=\"y = log(|x| + 1)\")\n",
    "\n",
    "plt.title(\"Revisiting Class 11th Geometry\")\n",
    "plt.xlabel(\"x values\")\n",
    "plt.ylabel(\"y values\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
